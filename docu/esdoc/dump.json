[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/MDReplacer.js",
    "content": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * the Markdown Replacer class parse a markdown string to a HTML string\r\n */\r\nclass MDReplacer {\r\n    /**\r\n     * ctor\r\n     */\r\n    constructor() {\r\n        /**\r\n         * dictionary with md token and html replacement tags\r\n         */\r\n        this.dictionary = {\r\n            \"## \": {\r\n                start: '<h2>',\r\n                end: '</h2>'\r\n            },\r\n            \"# \": {\r\n                start: '<h1>',\r\n                end: '</h1>'\r\n            },\r\n            \"**\": {\r\n                start: '<b>',\r\n                end: '</b>'\r\n            },\r\n            \"* \": {\r\n                start: '<ul><li>',\r\n                end: '</li></ul>'\r\n            },\r\n            \"*\": {\r\n                start: '<i>',\r\n                end: '</i>'\r\n            },\r\n            \">\": {\r\n                start: '<blockquote><p>',\r\n                end: '</p></blockquote>'\r\n            },\r\n            \" \": {\r\n                start: '<p>',\r\n                end: '</p>'\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * the replace method splits the string in blocks and parse each line\r\n     * @param input : the whole document as string input\r\n     * @return the parsed input string with all replaced tags\r\n     */\r\n    replace(input) {\r\n        // return if input is empty\r\n        if (input == \"\")\r\n            return \"\";\r\n        let blocks = input.split('\\n');\r\n        let result = \"\";\r\n        for (let line in blocks) {\r\n            for (let key in this.dictionary) {\r\n                while (blocks[line].indexOf(key) !== -1) {\r\n                    if ((key === '>' || key === ' ') && !this.startsWith(blocks[line], key)) {\r\n                        break;\r\n                    }\r\n                    blocks[line] = this.replaceKey(blocks[line], key);\r\n                }\r\n            }\r\n            if (line !== '0') {\r\n                result = result.concat('<br/>');\r\n            }\r\n            result = result.concat(blocks[line]);\r\n        }\r\n        result = this.combineMultiLineTags(result);\r\n        return result;\r\n    }\r\n    /**\r\n     * replace md tokens to html tags\r\n     * @param input: string to parse\r\n     * @param key: token to search\r\n     * @return this method returns the string with the replaced html tags\r\n     */\r\n    replaceKey(input, key) {\r\n        let result = input;\r\n        switch (key) {\r\n            case '**':\r\n                result = this.replaceDouble(result, key);\r\n                break;\r\n            case '*':\r\n                result = this.replaceDouble(result, key);\r\n                break;\r\n            default:\r\n                result = result.replace(key, this.dictionary[key]['start']).concat(this.dictionary[key]['end']);\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * If the markdown token has a start and end token,\r\n     * we replaces both\r\n     * @param input: string to parse\r\n     * @param key: token to replace\r\n     * @return parsed string with html tag at beginning and ending\r\n     */\r\n    replaceDouble(input, key) {\r\n        let result = input;\r\n        let tmp = result.split(key);\r\n        if (tmp.length % 3 === 0) {\r\n            for (let i = 0; i < 2; i++) {\r\n                if (i === 0) {\r\n                    result = result.replace(key, this.dictionary[key]['start']);\r\n                }\r\n                else {\r\n                    result = result.replace(key, this.dictionary[key]['end']);\r\n                }\r\n            }\r\n        }\r\n        else if (key === '**' && tmp.length === 2) {\r\n            result = this.replaceDouble(result, '*');\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * small helper method to check if the current token is a starting token\r\n     * @param input: string to check\r\n     * @param key: token to check\r\n     * @return the result as boolean, true if it is first else false\r\n     */\r\n    startsWith(input, key) {\r\n        let inputNormalized = input;\r\n        if (key !== ' ') {\r\n            inputNormalized = input.replace(/ /g, '');\r\n        }\r\n        if (inputNormalized.charAt(0) === key) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * combine multiline list elements to one list\r\n     * @param {string} input: string to parse\r\n     * @return {string} parsed string\r\n     */\r\n    combineMultiLineTags(input) {\r\n        let result = input;\r\n        result = result.replace(new RegExp('</li></ul><br/><ul><li>', 'g'), '</li><br/><li>');\r\n        result = result.replace(new RegExp('</p></blockquote><br/><blockquote><p>', 'g'), '</p><br/><p>');\r\n        return result;\r\n    }\r\n}\r\nexports.MDReplacer = MDReplacer;\r\n//# sourceMappingURL=MDReplacer.js.map",
    "static": true,
    "longname": "src/MDReplacer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "MDReplacer",
    "memberof": "src/MDReplacer.js",
    "static": true,
    "longname": "src/MDReplacer.js~MDReplacer",
    "access": null,
    "export": false,
    "importPath": "markdowntohtmlparser/src/MDReplacer.js",
    "importStyle": null,
    "description": "the Markdown Replacer class parse a markdown string to a HTML string",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/MDReplacer.js~MDReplacer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MDReplacer.js~MDReplacer#constructor",
    "access": null,
    "description": "ctor",
    "lineNumber": 10,
    "params": []
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "dictionary",
    "memberof": "src/MDReplacer.js~MDReplacer",
    "static": false,
    "longname": "src/MDReplacer.js~MDReplacer#dictionary",
    "access": null,
    "description": "dictionary with md token and html replacement tags",
    "lineNumber": 14,
    "type": {
      "types": [
        "{\"## \": *, \"# \": *, \"**\": *, \"* \": *, \"*\": *, \">\": *, \" \": *}"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "method",
    "name": "replace",
    "memberof": "src/MDReplacer.js~MDReplacer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MDReplacer.js~MDReplacer#replace",
    "access": null,
    "description": "the replace method splits the string in blocks and parse each line",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": ": the whole document as string input"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "the parsed input string with all replaced tags"
    }
  },
  {
    "__docId__": 5,
    "kind": "method",
    "name": "replaceKey",
    "memberof": "src/MDReplacer.js~MDReplacer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MDReplacer.js~MDReplacer#replaceKey",
    "access": null,
    "description": "replace md tokens to html tags",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "input:",
        "description": "string to parse"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key:",
        "description": "token to search"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "this method returns the string with the replaced html tags"
    }
  },
  {
    "__docId__": 6,
    "kind": "method",
    "name": "replaceDouble",
    "memberof": "src/MDReplacer.js~MDReplacer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MDReplacer.js~MDReplacer#replaceDouble",
    "access": null,
    "description": "If the markdown token has a start and end token,\nwe replaces both",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "input:",
        "description": "string to parse"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key:",
        "description": "token to replace"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "parsed string with html tag at beginning and ending"
    }
  },
  {
    "__docId__": 7,
    "kind": "method",
    "name": "startsWith",
    "memberof": "src/MDReplacer.js~MDReplacer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MDReplacer.js~MDReplacer#startsWith",
    "access": null,
    "description": "small helper method to check if the current token is a starting token",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "input:",
        "description": "string to check"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key:",
        "description": "token to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "the result as boolean, true if it is first else false"
    }
  },
  {
    "__docId__": 8,
    "kind": "method",
    "name": "combineMultiLineTags",
    "memberof": "src/MDReplacer.js~MDReplacer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MDReplacer.js~MDReplacer#combineMultiLineTags",
    "access": null,
    "description": "combine multiline list elements to one list",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "input:",
        "description": "string to parse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "parsed string"
    }
  },
  {
    "__docId__": 9,
    "kind": "file",
    "name": "src/server.js",
    "content": "/**\r\n * {express} minimal and flexible Node.js web application framework\r\n * that provides a robust set of features for web and mobile applications.\r\n */\r\nconst express = require('express');\r\n/**\r\n * {bodyParser} Parse incoming request bodies in a middleware\r\n * before your handlers, available under the req.body property.\r\n */\r\nconst bodyParser = require('body-parser');\r\n/**\r\n * {app} instance of express\r\n */\r\nconst app = express();\r\n/**\r\n * {MongoClient} client for database connection\r\n */\r\nconst MongoClient = require('mongodb').MongoClient;\r\n/**\r\n * {path} framework to resolve paths\r\n */\r\nconst path = require('path');\r\n/**\r\n * {MDReplacer} MDReplacer instance\r\n */\r\nconst MDReplacer = require('./MDReplacer');\r\n//member\r\nlet db;\r\n/**\r\n * instance of MDReplacer\r\n */\r\nlet parser = new MDReplacer.MDReplacer();\r\n// make public folder accessible to public\r\napp.use(express.static(path.resolve('./public')));\r\napp.use(\"/css\", express.static(path.resolve('./public/css')));\r\napp.use(\"/js\", express.static(path.resolve('./public/js')));\r\n//database setup\r\nMongoClient.connect('mongodb://dbuser:dbpassword@ds115131.mlab.com:15131/mongo-test-db', (err, database) => {\r\n    // start the server\r\n    if (err)\r\n        return console.log('DB-CONNECTION-ERR: ' + err);\r\n    db = database;\r\n    // set port to listen\r\n    app.listen(normalizePort(process.env.PORT || 3000), () => {\r\n        console.log('listening on 3000');\r\n    });\r\n    //clean history on startup\r\n    db.collection('inputs').drop((err, result) => {\r\n        if (err)\r\n            return console.log('WARN:' + err);\r\n        console.log(\"INFO: history clean!\");\r\n    });\r\n});\r\n// middleware \r\napp.set('view engine', 'ejs');\r\n// body-parser extracts the data from the form element and \r\n// add them to the body property in the request object\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n//let server read json data\r\napp.use(bodyParser.json());\r\n// routing\r\napp.get('/', (req, res) => {\r\n    db.collection('inputs').find().toArray((err, result) => {\r\n        if (err)\r\n            return console.log(err);\r\n        if (result === null) {\r\n            result = \"test\";\r\n        }\r\n        res.render('index.ejs', { inputs: result });\r\n    });\r\n});\r\napp.post('/inputs', (req, res) => {\r\n    var parsedText = parser.replace(req.body.input + '');\r\n    var toSave = {\r\n        name: req.body.name,\r\n        input: req.body.input,\r\n        output: parsedText\r\n    };\r\n    var history;\r\n    db.collection('inputs').save(toSave, (err, result) => {\r\n        if (err)\r\n            return console.log('SAVE-DB-ERR:' + err);\r\n        console.log('INFO: saved to database');\r\n        db.collection('inputs').find().toArray((err, result) => {\r\n            if (err)\r\n                return console.log('FIND-ON-DB-ERR: ' + err);\r\n            history = result;\r\n            res.setHeader('Content-Type', 'application/json');\r\n            res.redirect('/');\r\n        });\r\n    });\r\n});\r\napp.put('/inputs', (req, res) => {\r\n    db.collection('inputs')\r\n        .findOneAndUpdate({ name: 'input' }, {\r\n        $set: {\r\n            name: req.body.name,\r\n            input: req.body.input,\r\n            output: req.body.output\r\n        }\r\n    }, {\r\n        sort: { _id: -1 },\r\n        upsert: true\r\n    }, (err, result) => {\r\n        if (err)\r\n            return res.send(err);\r\n        res.send(result);\r\n    });\r\n});\r\napp.delete('/inputs', (req, res) => {\r\n    db.collection('inputs').drop((err, result) => {\r\n        if (err)\r\n            return res.status(500).send(err);\r\n        console.log(\"INFO: history clean!\");\r\n        res.status(200).send(\"INFO: history clean!\");\r\n    });\r\n});\r\n/**\r\n * Normalize a port into a number, string, or false.\r\n */\r\nfunction normalizePort(val) {\r\n    var port = parseInt(val, 10);\r\n    if (isNaN(port)) {\r\n        // named pipe\r\n        return val;\r\n    }\r\n    if (port >= 0) {\r\n        // port number\r\n        return port;\r\n    }\r\n    return false;\r\n}\r\n//# sourceMappingURL=server.js.map",
    "static": true,
    "longname": "src/server.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 10,
    "kind": "variable",
    "name": "express",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~express",
    "access": null,
    "export": false,
    "importPath": "markdowntohtmlparser",
    "importStyle": null,
    "description": "{express} minimal and flexible Node.js web application framework\nthat provides a robust set of features for web and mobile applications.",
    "lineNumber": 5,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "name": "bodyParser",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~bodyParser",
    "access": null,
    "export": false,
    "importPath": "markdowntohtmlparser",
    "importStyle": null,
    "description": "{bodyParser} Parse incoming request bodies in a middleware\nbefore your handlers, available under the req.body property.",
    "lineNumber": 10,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "variable",
    "name": "app",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~app",
    "access": null,
    "export": false,
    "importPath": "markdowntohtmlparser",
    "importStyle": null,
    "description": "{app} instance of express",
    "lineNumber": 14,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "variable",
    "name": "MongoClient",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~MongoClient",
    "access": null,
    "export": false,
    "importPath": "markdowntohtmlparser",
    "importStyle": null,
    "description": "{MongoClient} client for database connection",
    "lineNumber": 18,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "variable",
    "name": "path",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~path",
    "access": null,
    "export": false,
    "importPath": "markdowntohtmlparser",
    "importStyle": null,
    "description": "{path} framework to resolve paths",
    "lineNumber": 22,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "variable",
    "name": "MDReplacer",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~MDReplacer",
    "access": null,
    "export": false,
    "importPath": "markdowntohtmlparser",
    "importStyle": null,
    "description": "{MDReplacer} MDReplacer instance",
    "lineNumber": 26,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "variable",
    "name": "parser",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~parser",
    "access": null,
    "export": false,
    "importPath": "markdowntohtmlparser",
    "importStyle": null,
    "description": "instance of MDReplacer",
    "lineNumber": 32,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "function",
    "name": "normalizePort",
    "memberof": "src/server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server.js~normalizePort",
    "access": null,
    "export": false,
    "importPath": "markdowntohtmlparser",
    "importStyle": null,
    "description": "Normalize a port into a number, string, or false.",
    "lineNumber": 121,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 50,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 51,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 52,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 53,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 54,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 55,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 56,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 57,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 58,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 59,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 60,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 61,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 62,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 63,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 64,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 65,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 67,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 68,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 69,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 70,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 71,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 72,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 73,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 74,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  },
  {
    "__docId__": 75,
    "kind": "testFile",
    "name": "spec/MD2HTML.spec.js",
    "content": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst MDReplacer_1 = require(\"./../src/MDReplacer\");\r\nlet replacerDict = new MDReplacer_1.MDReplacer().dictionary;\r\nlet dictString = 'dict' + replacerDict.toString();\r\n/**\r\n * this are test for the mardown replacer\r\n * @test {MDReplacer}\r\n */\r\ndescribe('This project is about making a simple markdown parser.', () => {\r\n    /**\r\n     * @test {MDReplacer#replace}\r\n     */\r\n    describe('check empty input', () => {\r\n        it('input : \"\",' + dictString + ' , output: \"\"', () => {\r\n            // Arrange\r\n            let input = '';\r\n            let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n            // Act\r\n            let result = markdownReplacer.replace(input);\r\n            // Assert\r\n            expect(result).toBe('');\r\n        });\r\n    });\r\n    /**\r\n    * @test {MDReplacer#replace}\r\n    */\r\n    describe('check simple input of each type', () => {\r\n        it('input : \"# Heading1\", ' + dictString + ', output: \"<h1>Heading1</h1>\"', () => {\r\n            // Arrange\r\n            let input = '# Heading1';\r\n            let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n            // Act\r\n            let result = markdownReplacer.replace(input);\r\n            // Assert\r\n            expect(result).toBe('<h1>Heading1</h1>');\r\n        });\r\n        it('input : \"## Heading2\", ' + dictString + ', output: \"<h2>Heading2</h2>\"', () => {\r\n            // Arrange\r\n            let input = '## Heading2';\r\n            let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n            // Act\r\n            let result = markdownReplacer.replace(input);\r\n            // Assert\r\n            expect(result).toBe('<h2>Heading2</h2>');\r\n        });\r\n        it('input : \"**BoldText**\", ' + dictString + ', output: \"<b>BoldText</b>\"', () => {\r\n            // Arrange\r\n            let input = '**BoldText**';\r\n            let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n            // Act\r\n            let result = markdownReplacer.replace(input);\r\n            // Assert\r\n            expect(result).toBe('<b>BoldText</b>');\r\n        });\r\n        it('input : \"*ItalicText*\", ' + dictString + ', output: \"<i>ItalicText</i>\"', () => {\r\n            // Arrange\r\n            let input = '*ItalicText*';\r\n            let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n            // Act\r\n            let result = markdownReplacer.replace(input);\r\n            // Assert\r\n            expect(result).toBe('<i>ItalicText</i>');\r\n        });\r\n        it('input : \"* List\", ' + dictString + ', output: \"<ul><li>List</li></ul>\"', () => {\r\n            // Arrange\r\n            let input = '* List';\r\n            let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n            // Act\r\n            let result = markdownReplacer.replace(input);\r\n            // Assert\r\n            expect(result).toBe('<ul><li>List</li></ul>');\r\n        });\r\n        it('input : \">Cite text\", ' + dictString + ', output: \"<blockquote><p>Cite text</p></blockquote>\"', () => {\r\n            // Arrange\r\n            let input = '>Cite text';\r\n            let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n            // Act\r\n            let result = markdownReplacer.replace(input);\r\n            // Assert\r\n            expect(result).toBe('<blockquote><p>Cite text</p></blockquote>');\r\n        });\r\n        it('input : \" Paragraph\", ' + dictString + ', output: \"<p>Paragraph</p>\"', () => {\r\n            // Arrange\r\n            let input = ' Paragraph';\r\n            let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n            // Act\r\n            let result = markdownReplacer.replace(input);\r\n            // Assert\r\n            expect(result).toBe('<p>Paragraph</p>');\r\n        });\r\n    });\r\n    /**\r\n     * @test {MDReplacer#replace}\r\n     */\r\n    describe('check multi line input', () => {\r\n        it('input : \"# Test text \\\\n * with list\", ' + dictString + ', output: \"<h1>Test text</h1><br/><ul><li>with list</li></ul>\"', () => {\r\n            // Arrange\r\n            let input = '# Test text \\n* with list';\r\n            let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n            // Act\r\n            let result = markdownReplacer.replace(input);\r\n            // Assert\r\n            expect(result).toBe('<h1>Test text </h1><br/><ul><li>with list</li></ul>');\r\n        });\r\n    });\r\n    /**\r\n     * @test {MDReplacer#replace}\r\n     */\r\n    describe('check multi line list input', () => {\r\n        it('input : \"# Test text\\\\n* list item 1\\\\n* list item 2\\\\n* list item 3\", \\n\\t' + dictString + ',\\n\\toutput: \"<h1>Test text</h1><br/><ul><li>list item 1</li><br/><li>list item 2</li><br/><li>list item 3</li></ul>\"', () => {\r\n            // Arrange\r\n            let input = '# Test text\\n* list item 1\\n* list item 2\\n* list item 3';\r\n            let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n            // Act\r\n            let result = markdownReplacer.replace(input);\r\n            // Assert\r\n            expect(result).toBe('<h1>Test text</h1><br/><ul><li>list item 1</li><br/><li>list item 2</li><br/><li>list item 3</li></ul>');\r\n        });\r\n    });\r\n    /**\r\n     * @test {MDReplacer#replace}\r\n     */\r\n    describe('check bolt and italic input', () => {\r\n        it('input : \"**Test** *text*\", \\n\\t' + dictString + ',\\n\\toutput: \"<b>Test</b> <i>text</i>\"', () => {\r\n            // Arrange\r\n            let input = '**Test** *text*';\r\n            let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n            // Act\r\n            let result = markdownReplacer.replace(input);\r\n            // Assert\r\n            expect(result).toBe('<b>Test</b> <i>text</i>');\r\n        });\r\n    });\r\n    /**\r\n     * @test {MDReplacer#replaceDouble}\r\n     */\r\n    describe('MDReplacer replace double tags', () => {\r\n        it('input: \"**Test**, \\n\\toutput: \"<b>Test</b>\"', () => {\r\n            // Arrange\r\n            let input = '**Test**';\r\n            let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n            let key = '**';\r\n            // Act\r\n            let result = markdownReplacer.replaceDouble(input, key);\r\n            // Assert\r\n            expect(result).toBe('<b>Test</b>');\r\n        });\r\n    });\r\n    /**\r\n     * @test {MDReplacer#startsWith}\r\n     */\r\n    describe('MDReplacer check startWith method', () => {\r\n        describe('method result true', () => {\r\n            it('input: \"> test\",\\n\\toutput: \"true\"', () => {\r\n                // Arrange\r\n                let input = '> test';\r\n                let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n                let key = '>';\r\n                // Act\r\n                let result = markdownReplacer.startsWith(input, key);\r\n                // Assert\r\n                expect(result).toBe(true);\r\n            });\r\n        });\r\n        describe('method fails', () => {\r\n            it('input: \" test\",\\n\\toutput: \"true\"', () => {\r\n                // Arrange\r\n                let input = ' test';\r\n                let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n                let key = '>';\r\n                // Act\r\n                let result = markdownReplacer.startsWith(input, key);\r\n                // Assert\r\n                expect(result).toBe(false);\r\n            });\r\n        });\r\n    });\r\n    /**\r\n     * @test {MDReplacer#combineMultiLineTags}\r\n     */\r\n    describe('MDReplacer combineMultiLineTags', () => {\r\n        it('input: \"<ul><li>list item 1</li></ul><br/><ul><li>list item 2</li></ul><br/><ul><li>list item 3</li></ul>\",\\n\\toutput: \"<ul><li>list item 1</li><br/><li>list item 2</li><br/><li>list item 3</li></ul>\"', () => {\r\n            // Arrange\r\n            let input = '<ul><li>list item 1</li></ul><br/><ul><li>list item 2</li></ul><br/><ul><li>list item 3</li></ul>';\r\n            let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n            let key = '>';\r\n            // Act\r\n            let result = markdownReplacer.combineMultiLineTags(input);\r\n            // Assert\r\n            expect(result).toBe('<ul><li>list item 1</li><br/><li>list item 2</li><br/><li>list item 3</li></ul>');\r\n        });\r\n    });\r\n    /**\r\n     * @test {MDReplacer#replaceKey}\r\n     */\r\n    describe('MDReplacer check all different keys', () => {\r\n        describe('check heading 1', () => {\r\n            it('input: \"# \",\\n\\toutput: \"<h1></h1>\"', () => {\r\n                // Arrange\r\n                let input = '# ';\r\n                let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n                let key = '# ';\r\n                // Act\r\n                let result = markdownReplacer.replaceKey(input, key);\r\n                // Assert\r\n                expect(result).toBe('<h1></h1>');\r\n            });\r\n        }),\r\n            describe('check heading 2', () => {\r\n                it('input: \"## \",\\n\\toutput: \"<h2></h2>\"', () => {\r\n                    // Arrange\r\n                    let input = '## ';\r\n                    let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n                    let key = '## ';\r\n                    // Act\r\n                    let result = markdownReplacer.replaceKey(input, key);\r\n                    // Assert\r\n                    expect(result).toBe('<h2></h2>');\r\n                });\r\n            }),\r\n            describe('check list', () => {\r\n                it('input: \"* \",\\n\\toutput: \"<ul><li></li></ul>\"', () => {\r\n                    // Arrange\r\n                    let input = '* ';\r\n                    let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n                    let key = '* ';\r\n                    // Act\r\n                    let result = markdownReplacer.replaceKey(input, key);\r\n                    // Assert\r\n                    expect(result).toBe('<ul><li></li></ul>');\r\n                });\r\n            }),\r\n            describe('check bold', () => {\r\n                it('input: \"**** \",\\n\\toutput: \"<b></b>\"', () => {\r\n                    // Arrange\r\n                    let input = '****';\r\n                    let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n                    let key = '**';\r\n                    // Act\r\n                    let result = markdownReplacer.replaceKey(input, key);\r\n                    // Assert\r\n                    expect(result).toBe('<b></b>');\r\n                });\r\n            }),\r\n            describe('check italic', () => {\r\n                it('input: \"**\",\\n\\toutput: \"<i></i>\"', () => {\r\n                    // Arrange\r\n                    let input = '**';\r\n                    let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n                    let key = '**';\r\n                    // Act\r\n                    let result = markdownReplacer.replaceKey(input, key);\r\n                    // Assert\r\n                    expect(result).toBe('<i></i>');\r\n                });\r\n            }),\r\n            describe('check cite text', () => {\r\n                it('input: \">\",\\n\\toutput: \"<blockquote><p></p></blockquote>\"', () => {\r\n                    // Arrange\r\n                    let input = '>';\r\n                    let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n                    let key = '>';\r\n                    // Act\r\n                    let result = markdownReplacer.replaceKey(input, key);\r\n                    // Assert\r\n                    expect(result).toBe('<blockquote><p></p></blockquote>');\r\n                });\r\n            }),\r\n            describe('check paragraph', () => {\r\n                it('input: \" \",\\n\\toutput: \"<p></p>\"', () => {\r\n                    // Arrange\r\n                    let input = ' ';\r\n                    let markdownReplacer = new MDReplacer_1.MDReplacer();\r\n                    let key = ' ';\r\n                    // Act\r\n                    let result = markdownReplacer.replaceKey(input, key);\r\n                    // Assert\r\n                    expect(result).toBe('<p></p>');\r\n                });\r\n            });\r\n    });\r\n});\r\n//# sourceMappingURL=MD2HTML.spec.js.map",
    "static": true,
    "longname": "spec/MD2HTML.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "testDescribe",
    "name": "describe0",
    "testId": 0,
    "memberof": "spec/MD2HTML.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0",
    "access": null,
    "description": "this are test for the mardown replacer",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{MDReplacer}"
      }
    ],
    "testTargets": [
      "MDReplacer"
    ]
  },
  {
    "__docId__": 77,
    "kind": "testDescribe",
    "name": "describe1",
    "testId": 1,
    "memberof": "spec/MD2HTML.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe1",
    "access": null,
    "description": "check empty input",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{MDReplacer#replace}"
      }
    ],
    "testTargets": [
      "MDReplacer#replace"
    ]
  },
  {
    "__docId__": 78,
    "kind": "testIt",
    "name": "it2",
    "testId": 2,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe1.it2",
    "access": null,
    "lineNumber": 15
  },
  {
    "__docId__": 79,
    "kind": "testDescribe",
    "name": "describe3",
    "testId": 3,
    "memberof": "spec/MD2HTML.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe3",
    "access": null,
    "description": "check simple input of each type",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{MDReplacer#replace}"
      }
    ],
    "testTargets": [
      "MDReplacer#replace"
    ]
  },
  {
    "__docId__": 80,
    "kind": "testIt",
    "name": "it4",
    "testId": 4,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe3.it4",
    "access": null,
    "lineNumber": 29
  },
  {
    "__docId__": 81,
    "kind": "testIt",
    "name": "it5",
    "testId": 5,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe3.it5",
    "access": null,
    "lineNumber": 38
  },
  {
    "__docId__": 82,
    "kind": "testIt",
    "name": "it6",
    "testId": 6,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe3.it6",
    "access": null,
    "lineNumber": 47
  },
  {
    "__docId__": 83,
    "kind": "testIt",
    "name": "it7",
    "testId": 7,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe3.it7",
    "access": null,
    "lineNumber": 56
  },
  {
    "__docId__": 84,
    "kind": "testIt",
    "name": "it8",
    "testId": 8,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe3.it8",
    "access": null,
    "lineNumber": 65
  },
  {
    "__docId__": 85,
    "kind": "testIt",
    "name": "it9",
    "testId": 9,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe3.it9",
    "access": null,
    "lineNumber": 74
  },
  {
    "__docId__": 86,
    "kind": "testIt",
    "name": "it10",
    "testId": 10,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe3.it10",
    "access": null,
    "lineNumber": 83
  },
  {
    "__docId__": 87,
    "kind": "testDescribe",
    "name": "describe11",
    "testId": 11,
    "memberof": "spec/MD2HTML.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe11",
    "access": null,
    "description": "check multi line input",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{MDReplacer#replace}"
      }
    ],
    "testTargets": [
      "MDReplacer#replace"
    ]
  },
  {
    "__docId__": 88,
    "kind": "testIt",
    "name": "it12",
    "testId": 12,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe11.it12",
    "access": null,
    "lineNumber": 97
  },
  {
    "__docId__": 89,
    "kind": "testDescribe",
    "name": "describe13",
    "testId": 13,
    "memberof": "spec/MD2HTML.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe13",
    "access": null,
    "description": "check multi line list input",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{MDReplacer#replace}"
      }
    ],
    "testTargets": [
      "MDReplacer#replace"
    ]
  },
  {
    "__docId__": 90,
    "kind": "testIt",
    "name": "it14",
    "testId": 14,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe13.it14",
    "access": null,
    "lineNumber": 111
  },
  {
    "__docId__": 91,
    "kind": "testDescribe",
    "name": "describe15",
    "testId": 15,
    "memberof": "spec/MD2HTML.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe15",
    "access": null,
    "description": "check bolt and italic input",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{MDReplacer#replace}"
      }
    ],
    "testTargets": [
      "MDReplacer#replace"
    ]
  },
  {
    "__docId__": 92,
    "kind": "testIt",
    "name": "it16",
    "testId": 16,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe15.it16",
    "access": null,
    "lineNumber": 125
  },
  {
    "__docId__": 93,
    "kind": "testDescribe",
    "name": "describe17",
    "testId": 17,
    "memberof": "spec/MD2HTML.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe17",
    "access": null,
    "description": "MDReplacer replace double tags",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{MDReplacer#replaceDouble}"
      }
    ],
    "testTargets": [
      "MDReplacer#replaceDouble"
    ]
  },
  {
    "__docId__": 94,
    "kind": "testIt",
    "name": "it18",
    "testId": 18,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe17.it18",
    "access": null,
    "description": "input: \"**Test**, \n\toutput: \"<b>Test</b>\"",
    "lineNumber": 139
  },
  {
    "__docId__": 95,
    "kind": "testDescribe",
    "name": "describe19",
    "testId": 19,
    "memberof": "spec/MD2HTML.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe19",
    "access": null,
    "description": "MDReplacer check startWith method",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{MDReplacer#startsWith}"
      }
    ],
    "testTargets": [
      "MDReplacer#startsWith"
    ]
  },
  {
    "__docId__": 96,
    "kind": "testDescribe",
    "name": "describe20",
    "testId": 20,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe19.describe20",
    "access": null,
    "description": "method result true",
    "lineNumber": 154
  },
  {
    "__docId__": 97,
    "kind": "testIt",
    "name": "it21",
    "testId": 21,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe19.describe20",
    "testDepth": 3,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe19.describe20.it21",
    "access": null,
    "description": "input: \"> test\",\n\toutput: \"true\"",
    "lineNumber": 155
  },
  {
    "__docId__": 98,
    "kind": "testDescribe",
    "name": "describe22",
    "testId": 22,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe19.describe22",
    "access": null,
    "description": "method fails",
    "lineNumber": 166
  },
  {
    "__docId__": 99,
    "kind": "testIt",
    "name": "it23",
    "testId": 23,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe19.describe22",
    "testDepth": 3,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe19.describe22.it23",
    "access": null,
    "description": "input: \" test\",\n\toutput: \"true\"",
    "lineNumber": 167
  },
  {
    "__docId__": 100,
    "kind": "testDescribe",
    "name": "describe24",
    "testId": 24,
    "memberof": "spec/MD2HTML.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe24",
    "access": null,
    "description": "MDReplacer combineMultiLineTags",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{MDReplacer#combineMultiLineTags}"
      }
    ],
    "testTargets": [
      "MDReplacer#combineMultiLineTags"
    ]
  },
  {
    "__docId__": 101,
    "kind": "testIt",
    "name": "it25",
    "testId": 25,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe24.it25",
    "access": null,
    "description": "input: \"<ul><li>list item 1</li></ul><br/><ul><li>list item 2</li></ul><br/><ul><li>list item 3</li></ul>\",\n\toutput: \"<ul><li>list item 1</li><br/><li>list item 2</li><br/><li>list item 3</li></ul>\"",
    "lineNumber": 183
  },
  {
    "__docId__": 102,
    "kind": "testDescribe",
    "name": "describe26",
    "testId": 26,
    "memberof": "spec/MD2HTML.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe26",
    "access": null,
    "description": "MDReplacer check all different keys",
    "lineNumber": 197,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{MDReplacer#replaceKey}"
      }
    ],
    "testTargets": [
      "MDReplacer#replaceKey"
    ]
  },
  {
    "__docId__": 103,
    "kind": "testIt",
    "name": "it27",
    "testId": 27,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe26.it27",
    "access": null,
    "description": "input: \"# \",\n\toutput: \"<h1></h1>\"",
    "lineNumber": 199
  },
  {
    "__docId__": 104,
    "kind": "testIt",
    "name": "it28",
    "testId": 28,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe26.it28",
    "access": null,
    "description": "input: \"## \",\n\toutput: \"<h2></h2>\"",
    "lineNumber": 211
  },
  {
    "__docId__": 105,
    "kind": "testIt",
    "name": "it29",
    "testId": 29,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe26.it29",
    "access": null,
    "description": "input: \"* \",\n\toutput: \"<ul><li></li></ul>\"",
    "lineNumber": 223
  },
  {
    "__docId__": 106,
    "kind": "testIt",
    "name": "it30",
    "testId": 30,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe26.it30",
    "access": null,
    "description": "input: \"**** \",\n\toutput: \"<b></b>\"",
    "lineNumber": 235
  },
  {
    "__docId__": 107,
    "kind": "testIt",
    "name": "it31",
    "testId": 31,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe26.it31",
    "access": null,
    "description": "input: \"**\",\n\toutput: \"<i></i>\"",
    "lineNumber": 247
  },
  {
    "__docId__": 108,
    "kind": "testIt",
    "name": "it32",
    "testId": 32,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe26.it32",
    "access": null,
    "description": "input: \">\",\n\toutput: \"<blockquote><p></p></blockquote>\"",
    "lineNumber": 259
  },
  {
    "__docId__": 109,
    "kind": "testIt",
    "name": "it33",
    "testId": 33,
    "memberof": "spec/MD2HTML.spec.js~describe0.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/MD2HTML.spec.js~describe0.describe26.it33",
    "access": null,
    "description": "input: \" \",\n\toutput: \"<p></p>\"",
    "lineNumber": 271
  }
]